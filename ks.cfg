#install
#version=RHEL9
# Use text mode install
text --non-interactive
# Shutdown after installation
#shutdown
repo --name="BaseOS" --baseurl=http://dl.rockylinux.org/stg/rocky/9/BaseOS/$basearch/os/ --cost=200
repo --name="AppStream" --baseurl=http://dl.rockylinux.org/stg/rocky/9/AppStream/$basearch/os/ --cost=200
repo --name="CRB" --baseurl=http://dl.rockylinux.org/stg/rocky/9/CRB/$basearch/os/ --cost=200
repo --name="extras" --baseurl=http://dl.rockylinux.org/stg/rocky/9/extras/$basearch/os --cost=200
repo --name="epel" --baseurl=https://dl.fedoraproject.org/pub/epel/9/Everything/$basearch/ --cost=200
repo --name="epel-testing" --baseurl=https://dl.fedoraproject.org/pub/epel/testing/9/Everything/$basearch/ --cost=200

# Add group because of brltty
group --name brlapi

# System services
services --enabled="chronyd,brltty"

# Partition clearing information
clearpart --all --drives=sda
part /boot --fstype=ext4 --size=500
part /var --fstype=ext4 --size=20000
part / --fstype=ext4 --size=1 --grow
part swap --fstype=swap --size=4096

# Set the bootloader configuration to use BIOS mode 
bootloader --location=mbr --append="rhgb quiet" --boot-drive=sda

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# License agreement
eula --agreed

# Network information
network --device=link --bootproto static --ip 192.168.1.69 --netmask 255.255.255.0 --gateway 192.168.1.254 --nameserver 8.8.8.8 --nameserver 8.8.4.4 --onboot yes

#hostname idragonfly.net

# Run the Setup Agent on first boot
firstboot --disable

# System timezone
timezone America/Chicago --utc

%packages
@base
@virtualization
@core
@development
@network-tools
@system-tools
@security-tools
@server-productivity
@container-tools
@cockpit
@rescue
python3
python3-virtualenv
ntp
cronie
fail2ban
certbot
nfs-utils
rpcbind
httpd
mariadb-server
mariadb
php
php-cli
php-mysqli
php-pdo
php-fpm
mod_ssl
vim
wget
rsync
git
curl
gcc
cmake
make
autoconf
automake
libtool
gdb
strace
net-tools
iproute2
lsof
top
iotop
collectd
logrotate
createrepo
mkisofs
genisoimage
isomd5sum
nss-tools
syslinux
yum-utils
tmux
docker
podman
buildah
skopeo
qemu-kvm
libvirt
bridge-utils
NetworkManager
createrepo_c
brltty
screen
%end

# Post installation script
%post --interpreter=/usr/bin/bash

# Configure SELinux
setenforce 0
# Make sure it stays permissive.
sed -i 's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config

echo "idragonfly.net" > /etc/hostname

# Enable ipv6
sysctl -w net.ipv6.conf.all.disable_ipv6=0
sysctl -w net.ipv6.conf.default.disable_ipv6=0
sysctl -w net.ipv6.conf.lo.disable_ipv6=0

# Request dynamic IPv6 on ALL interfaces
dhclient -6 -a

# Update the system
dnf update -y

# Upgrade pip
python3 -m pip install --upgrade pip

# Define the UUIDs (replace with your actual UUIDs)
MODELS_UUID="9a58889a-f8ba-4cc9-80e2-b7ecd5dc1e2c"
DATA_UUID="63c30ffb-09cf-4ee8-96b1-f94fb8eaf38d"

# Create mount points (make sure they don't already exist)
mkdir -p /models /data /venv
chmod 777 /data /models /venv
# Add to /etc/fstab
echo "UUID=$MODELS_UUID /models ext4 defaults 0 2" >> /etc/fstab
echo "UUID=$DATA_UUID /data ext4 defaults 0 2" >> /etc/fstab

# Mount the partitions
mount -a

systemctl enable NetworkManager cockpit.socket
systemctl start NetworkManager cockpit.socket

# Create the brlapi group
groupadd brlapi

# Bring network interfaces up
for i in $(nmcli -g NAME con show); do nmcli con up "$i"; done;

# Generate the hashed password
HASHED_PASSWORD=$(openssl passwd -6 "password")

# Set the hashed password for the root user
usermod -p "$HASHED_PASSWORD" root

# Create the user with the specified home directory and shell
useradd -m -d /home/dan -s /bin/bash dan

# Set the hashed password for the user
usermod -p "$HASHED_PASSWORD" dan

# Add the user to the wheel group
usermod -aG wheel dan

# Install deps
dnf -y install kernel-headers-$(uname -r) kernel-devel-$(uname -r)
dnf -y install gdb
dnf -y install gcc gcc-c++ make dkms pciutils elfutils-libelf-devel acpid pkgconfig gdb
dnf -y groupinstall "Development Tools"

# Download and import NVIDIA GPG key
#curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/D42D0685.pub -o /tmp/nvidia_cuda_key.pub
#rpm --import /tmp/nvidia_cuda_key.pub
#dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel9/x86_64/cuda-rhel9.repo

# Install CUDA driver ONLY (no toolkit yet)
#dnf -y install nvidia-driver-latest-dkms
#systemctl enable persistenced
#systemctl restart persistenced

# Enable and start services
systemctl enable httpd mariadb firewalld NetworkManager cockpit.socket nfs-server rpcbind
systemctl start httpd mariadb firewalld NetworkManager cockpit.socket nfs-server rpcbind

# Install pip
dnf install -y python3-pip

# Create the virtual environment directory if it doesn't exist
mkdir -p /venv

# Create a virtual environment named 'ml_transformers'
#python3 -m venv /venv/ml_transformers

# Activate the virtual environment and install the required packages
#/bin/bash -c "source /venv/ml_transformers/bin/activate && pip3 install --upgrade pip && pip3 install \
#    transformers \
#    torch \
#    scikit-learn \
#    pandas \
#    numpy \
#    scipy \
#    jupyter \
#    ipykernel \
#    ipython \
#    notebook \
#    optuna \
#    ray[tune] \
#    wandb \
#    torchviz \
#    pytorch-lightning \
#    huggingface_hub \
#    datasets \
#    evaluate \
#    nltk \
#    spacy \
#    gensim \
#    faiss-cpu \
#    sentence-transformers \
#    scikit-optimize \
#    xgboost \
#    lightgbm \
#    catboost \
#    yellowbrick \
#    mlflow \
#    dask[complete] \
#    pyarrow \
#    fsspec \
#    s3fs \
#    gdown \
#    openpyxl \
#    xlrd \
#    xlwt \
#    gradio \
#    streamlit \
#    beautifulsoup4 \
#    requests \
#    lxml \
#    html5lib \
#    aiohttp \
#    aiofiles \
#    tqdm \
#    loguru \
#    hydra-core \
#    omegaconf \
#    omegaconf[struct] \
#    pydantic \
#    rich \
#    pytest \
#    pytest-cov \
#    pylint \
#    black \
#    isort \
#    flake8 \
#    mypy"

# Deactivate the virtual environment
# Not needed as the subshell will exit

# Clean up
dnf clean all

# Set up our firewall last and cross our fingers...
firewall-cmd --permanent --add-service=ssh
firewall-cmd --permanent --add-service=https
firewall-cmd --permanent --add-service=http
firewall-cmd --permanent --add-service=nfs-server
firewall-cmd --permanent --add-service=nfs
firewall-cmd --reload

%end
